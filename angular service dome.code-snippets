{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Angular Bootstrap Component": {
		"prefix": "component${name}",
		"body": [
			"import { Component } from '@angular/core';",
			"",
			"@Component({",
			"  selector: 'app-${name}',",
			"  templateUrl: './${name}.html',",
			"  styleUrls: ['./${name}.css']",
			"})",
			"export class ${name}Component {",
			"  // Component logic goes here",
			"}"
		],
		"description": "Create a new Angular component with Bootstrap markup",
	},
	"Angular Bootstrap Service": {
		"prefix": "service${name}",
		"body": [
			"import { Injectable } from '@angular/core';",
			"//import { ApiHttpService } from '';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ${1:Service} {",
			"  // Service logic goes here",
			"constructor(private http: ApiHttpService) {}",
			"\n",
			"getConsentList() {",
			"return this.http",
			".get('consent/getConsentList')",
			".then((result) => {",
			"if (result) {",
			"return result ? result.data : null;",
			"}",
			"})",
			".catch((err) => {});",
			"}",
			"}",
		],
		"description": "Create a new Angular service with Bootstrap"
	}
}