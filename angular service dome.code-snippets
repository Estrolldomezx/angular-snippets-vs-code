{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Angular Bootstrap Component": {
		"prefix": "component${name}",
		"body": [
			"import { Component } from '@angular/core';",
			"",
			"@Component({",
			"  selector: 'app-${name}',",
			"  templateUrl: './${name}.html',",
			"  styleUrls: ['./${name}.css']",
			"})",
			"export class ${name}Component {",
			"  // Component logic goes here",
			"}"
		],
		"description": "Create a new Angular component with Bootstrap markup",
	},
	"Angular Bootstrap Service": {
		"prefix": "service${name}",
		"body": [
			"import { Injectable } from '@angular/core';",
			"//import { ApiHttpService } from '';",
			"",
			"@Injectable({",
			"  providedIn: 'root'",
			"})",
			"export class ${1:Service} {",
			"  // Service logic goes here",
			"constructor(private http: ApiHttpService) {}",
			"\n",
			"// list",
			"get${name}List() {",
			"return this.http",
			".get('${name}/get${name}List')",
			".then((result) => {",
			"if (result) {",
			"return result ? result.data : null;",
			"}",
			"})",
			".catch((err) => {});",
			"}",
			"\n",
			"// search",
			"search${name}(body: any) {",
			"return this.http",
			".post('${name}/search', body)",
			".then((result) => {",
			"if (result) {",
			"return result.data;",
			"}",
			"})",
			".catch((err) => {});",
			"}",
			"\n",
			"// add",
			"create${name}(data: any) {",
			"return this.http",
			".post('${name}/add', data)",
			".then((result) => {",
			"if (result) {",
			"return result.data == 1;",
			"}",
			"})",
			".catch((err) => {});",
			"}",
			"\n",
			"//edit",
			"update${name}(data: any) {",
			"return this.http",
			".post('${name}/update', data)",
			".then((result) => {",
			"if (result) {",
			"return result.data == 1;",
			"}",
			"})",
			".catch((err) => {});",
			"}",
			"\n",
			"//delete",
			"delete${name}(id: number) {",
			"return this.http",
			".delete(`${name}/delete/${${id}}`)",
			".then((result) => {",
			"if (result) {",
			"return result.data == 1;",
			"}",
			"})",
			".catch((err) => {});",
			"}",
			"}",
		],
		"description": "Create a new Angular service CRUD with Bootstrap"
	},
	"Angular Bootstrap Service": {
		"prefix": "componentService${name}",
		"body": [
			"onSearch(data: any, paging, sort) {",
			"if (data) {",
			"this.requestReprt = data;",
			"if (sort) {",
			"this.requestReprt.orderByName = sort.active;",
			"this.requestReprt.orderBy = sort.direction;",
			"}",
			"if (paging) {",
			"this.requestReprt.pageIndex = paging?.pageIndex.toString();",
			"this.requestReprt.pageSize = paging?.pageSize.toString();",
			"}",
			"//if (data.DateFrom && data.DateTo) {",
			"//this.dateFrom = data.DateFrom",
			"//this.dateTo = data.DateTo",
			"//} else {",
			"//this.requestReprt.DateFrom = this.dateFrom",
			"//this.requestReprt.DateTo = this.dateTo",
			"}",
			"this.${name}Service",
			".search${name}(this.requestReprt)",
			".then((res) => {",
			"this.${name}List = res;",
			"this.pageNumber = parseInt(this.requestReprt.pageIndex);",
			"this.pageSize = parseInt(this.requestReprt.pageSize);",
			"this.shareDataService.data = data;",
			"this.shareDataService.paging = paging;",
			"this.shareDataService.sort = sort;",
			"});",
			"}",
			"}",
			"\n",
			"onAdd() {",
			"this.dialogService",
			".showFormDialog(",
			"${name}FormDialogComponent,",
			"'New ${name} Form',",
			"null",
			")",
			".then((data: ${name}FormDialogComponent) => {",
			"if (data) {",
			"this.${name}Service",
			".create${name}(data)",
			".then((res) => {",
			"if (res) {",
			"this.onSearch(null, null, null);",
			"}",
			"});",
			"}",
			"});",
			"}",
			"\n",
			"onEdit(consent) {",
			"if (consent) {",
			"this.dialogService",
			".showFormDialog(",
			"${name}FormDialogComponent,",
			"'Edit ${name} Form',",
			"consent",
			")",
			".then((data: ${name}FormDialogComponent) => {",
			"if (data) {",
			"this.${name}Service",
			".update${name}(data)",
			".then((res) => {",
			"if (res) {",
			"this.onSearch(null, null, null);",
			"}",
			"});",
			"}",
			"});",
			"}",
			"}",
			"\n",
			"onDelete(id) {",
			"this.dialogService",
			".showTwoButtonDialog(",
			"{",
			"dialogIcon: 'fa fa-question',",
			"dialogTitle: this.messages.confirmDelete,",
			"dialogDetail: '',",
			"},",
			"this.messages.confirm,",
			"this.messages.cancel",
			")",
			".then((data) => {",
			"if (id && data) {",
			"this.${name}Service",
			".delete${name}(id)",
			".then((res) => {",
			"if (res) {",
			"this.onSearch(null,null, null);",
			"}",
			"});",
			"}",
			"}",
		],
		"description": "Create a new Angular component call service CRUD with Bootstrap"
	},
	"Angular Bootstrap Component": {
		"prefix": "inputText${name}",
		"body": [
			"<label",
			"for=\"${name}\"",
			"class=\"col-xl-4 col-md-12 col-form-label text-xl-right\"",
			">",
			"${name} :",
			"</label>",
			"<div class=\"col-xl-8 col-md-12\">",
			"<input",
			"specialChar",
			"autocomplete=\"off\"",
			"type=\"text\"",
			"class=\"form-control\"",
			"id=\"${name}\"",
			"formControlName=\"${name}\"",
			"/>",
			"</div>",
		],
		"description": "Create a new input text with Bootstrap markup",
	},
	"Angular Bootstrap Component": {
		"prefix": "inputNumber${name}",
		"body": [
			"<label",
			"for=\"${name}\"",
			"class=\"col-xl-4 col-md-12 col-form-label text-xl-right\"",
			">",
			"${name} :",
			"</label>",
			"<div class=\"col-xl-8 col-md-12\">",
			"<input",
			"specialChar",
			"autocomplete=\"off\"",
			"type=\"number\"",
			"class=\"form-control\"",
			"id=\"${name}\"",
			"formControlName=\"${name}\"",
			"[min]=\"0\"",
			"[max]=\"1000\"",
			"/>",
			"</div>",
		],
		"description": "Create a new input number with Bootstrap markup",
	},
}